package {	/*	 * MicRecorder	 * http://www.bytearray.org/?p=1858	 */		// Standard classes for general Flash use	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.Microphone;	import flash.net.FileReference;	import flash.net.FileReferenceList;		// Classes for recording sound from Microphone	import org.as3wavsound.WavSound;	import org.bytearray.micrecorder.MicRecorder;	import org.bytearray.micrecorder.encoder.WaveEncoder;	import org.bytearray.micrecorder.events.RecordingEvent;		// Classes for sending data to remote script    import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLLoader;    import flash.net.URLVariables;    import flash.events.ProgressEvent;		// The main timeline is usually referred to as a MovieClip	public class Record extends MovieClip {						private var recorder:MicRecorder = new MicRecorder(new WaveEncoder());		private var player:WavSound;		private var _state:Boolean;		private var _file:FileReference = new FileReference();		private var _list:FileReferenceList = new FileReferenceList();				// Class Constructor		public function Record():void {			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAddedToStage(event:Event):void {						// Listen for certain recording events			recorder.addEventListener(RecordingEvent.RECORDING, onRecording);			recorder.addEventListener(Event.COMPLETE, onRecordComplete);						// Any time the user clicks on the page then we check whether to start or stop recording			stage.addEventListener(MouseEvent.CLICK, triggerRecording);					}				private function onRecording(event:RecordingEvent):void {			trace("Recording since : " + event.time + " ms.");		}		private function onRecordComplete(event:Event):void {						trace("Recording has completed.");						// Create a new instance of the WavSound Class			//player = new WavSound(recorder.output);						// Start playing back the recorded sound			//player.play();						// Trigger the file to be saved to the users machine.			//_file.save(recorder.output, "recorded.wav");						// Construct the URL request			var req:URLRequest = new URLRequest("http://mydomain.com/test.php");            req.data = recorder.output;			req.method = URLRequestMethod.POST;			req.contentType = 'application/octet-stream';						// Listen out for the progress			var loader:URLLoader = new URLLoader(req);			loader.addEventListener(Event.COMPLETE, function(evt:Event) {				trace(evt);			});					}		private function triggerRecording(event:MouseEvent):void {						// If the state isn't set to true then start recording			if (!_state) {				recorder.record();			} 			// Otherwise it is set to false and means it's already recording			else {				recorder.stop();			}						// Change the value of the 'state' variable to reflect its state			_state = !_state;					}	}}